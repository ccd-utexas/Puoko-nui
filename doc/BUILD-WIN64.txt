
==================== INSTALL USB DRIVER ==================== 
Download libusb-win32-bin-1.2.6.0.zip from
http://sourceforge.net/projects/libusb-win32/files/libusb-win32-releases/1.2.6.0/libusb-win32-bin-1.2.6.0.zip/download

Attach timer unit to USB port
Windows may pop up a dialog saying it couldn't install a driver - We are about to fix that.

Extract libusb-win32-bin-1.2.6.0.zip and run bin\inf-wizard.exe
Select the timer unit from the list of USB devices. It should show up with Vendor ID 0x403, Product ID 0x6001, Description "USB <-> Serial"
Select a location to save the resulting .inf, anywhere (eg the Desktop) is fine. You can delete it once we're done with the installation
Select Install Now from the next dialog
Allow the driver to install if windows shows an "Unsigned Driver" warning
(Optional) Check that it shows up correctly in the Device Manager - it should appear as "USB <-> Serial" under "libusb-win32 devices".

==================== INSTALL TOOLCHAIN ====================
Download MinGW-w64 binaries from
http://cdnetworks-us-2.dl.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Automated%20Builds/mingw-w64-bin_i686-mingw_20111220.zip
Extract to c:/MinGW

Download MSYS binaries from
http://voxel.dl.sourceforge.net/project/mingw-w64/External%20binary%20packages%20%28Win64%20hosted%29/MSYS%20%2832-bit%29/MSYS-20111123.zip
Extract to c:/MinGW/msys


Copy c:/MinGW/bin/x86_64-w64-mingw32-gcc.exe and rename it to gcc.exe

Run (double-click) c:/MinGW/msys/postinstall/pi.bat
Continue with post install (y)
We do have MinGW installed (y)
MinGW Installation is at c:/MinGW/

Create a shortcut to c:/MinGW/msys/msys.bat somewhere convenient. All following commands starting with a '$' are run from this shell

We don't plan on installing 32-bit toolchain, so we will remove the prefix from the 64-bit tools to avoid having to prefix everything later
Run msys.bat and execute
$ cd /mingw/bin
$ for i in `ls x86_64-w64-mingw32-*`; do cp "$i" "${i:19}"; done

TODO: Cover installing pthreads

Download Git/msysGit from http://code.google.com/p/msysgit/downloads/list
When it asks about adjusting the PATH environment, choose the second option
(Run Git from the Windows Command Prompt).

To allow git to be used from msys, create a file called .bash_profile in ~ with the following contents:
export PATH=$PATH:/c/"Program Files (x86)"/Git/bin

The settings will only be applied to new command windows, so close all open command windows to avoid confusion.

==================== DOWNLOAD PUOKO-NUI CODE ====================
Open a new msys terminal and in the home directory check out a copy of the code using git
git clone https://github.com/pchote/Puoko-nui.git puokonui

The home directory should be located in c:/MinGW/msys/home/
In the following, '~' refers to this directory.

==================== BUILD DEPENDENCIES ====================
Download 64-bit libftdi binaries from
http://picusb.googlecode.com/files/libftdi_0.19_devkit_MinGW64_20August2011.zip

Copy include to ~/puokonui/ftdi/include
Copy lib/lib64 to ~/puokonui/ftdi/lib
Copy bin/bin64/libftdi.dll to ~/puokonui

Download ds9 and XPA binaries from:
http://hea-www.harvard.edu/saord/download/ds9/windows/SAOImage%20DS9%207.0.2%20Install.exe
http://hea-www.harvard.edu/saord/download/ds9/windows/XPA%202.1.14%20Install.exe

and install to C:/ds9

Note: I have had mixed results in getting xpa to work correctly under windows. You may need
to manually run xpans.exe before running any xpa enabled programs if you want them to be able to communicate. 

Download cfitsio from
ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfit3290.zip

Compile with
$ ./configure --prefix=/usr/local
$ make
$ make install


Download and compile libfltk 1.3.0
$ ./configure
$ make
$ make install

if make fails with an error about libstdc++-6.dll, copy the following files from C:/MinGW/mingw/lib to ~/fltk-1.3.0fluid:
   libstdc++-6.dll
   libgcc_s_sjlj-1.dll


Copy the above two dlls into ~/puokonui now, as the next step will need them.

==================== BUILD/INSTALL PUOKO-NUI ====================

Compile with
$ make CAMERA_TYPE=PICAM GUI_TYPE=FLTK

(Optional) Copy binaries to a separate location to run from, <run dir>
Copy puokonui.exe to <run dir>
Copy libftdi.dll to <run dir>
Copy libstdc++-6.dll to <run dir>
Copy libgcc_s_sjlj-1.dll to <run dir>
Copy c:\mingw\bin\pthreadGC2-w64.dll to <run dir>
Create directory <run dir>\logs

==================== RUN ====================
Make sure that the logs directory exists in the same location as puokonui.exe, it won't run if it isn't present.
Double click puokonui.exe to run it - it should pop up a graphical window.